openapi: 3.0.0
info:
  title: Blog Application API
  version: 1.0.0
  description: API documentation for the Blog Application
servers:
  - url: http://localhost:3000/api
    description: Local development server

tags:
  - name: Authentication
    description: Endpoints related to authentication management
  - name: Users
    description: Endpoints related to user management
  - name: Posts
    description: Endpoints related to post management
  - name: Comments
    description: Endpoints related to comment management
  - name: Roles
    description: Endpoints related to role management

components:
  schemas:
    User:
      type: object
      required:
        - username
        - email
        - password
        - phoneNumber
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
        phoneNumber:
          type: string
        roles:
          type: array
          items:
            $ref: '#/components/schemas/Role'
        resetPasswordToken:
          type: string
        resetPasswordExpires:
          type: string
          format: date-time

    Role:
      type: object
      required:
        - name
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string

    Post:
      type: object
      required:
        - title
        - body
        - author
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        body:
          type: string
        author:
          $ref: '#/components/schemas/User'
        comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'

    Comment:
      type: object
      required:
        - body
        - author
        - post
      properties:
        id:
          type: string
          format: uuid
        body:
          type: string
        author:
          $ref: '#/components/schemas/User'
        post:
          $ref: '#/components/schemas/Post'

  responses:
    NotFound:
      description: Resource not found
    Unauthorized:
      description: Unauthorized
    BadRequest:
      description: Bad request
    InternalServerError:
      description: Internal server error

  parameters:
    UserId:
      name: id
      in: path
      required: true
      schema:
        type: string
      description: The ID of the user

    PostId:
      name: id
      in: path
      required: true
      schema:
        type: string
      description: The ID of the post

    CommentId:
      name: id
      in: path
      required: true
      schema:
        type: string
      description: The ID of the comment

paths:
  /api/signup:
    post:
      tags:
        - Authentication
      summary: User registration
      requestBody:
        description: User object that needs to be added
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
                phoneNumber:
                  type: string
      responses:
        '201':
          description: User created successfully

  /api/signin:
    post:
      tags:
        - Authentication
      summary: User login
      requestBody:
        description: User login credentials
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: User logged in successfully

  /api/forgot-password:
    post:
      tags:
        - Authentication
      summary: Request password reset
      description: Sends a password reset email to the user if the provided email is associated with an account.
      requestBody:
        description: Email address to send the password reset link
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
      responses:
        '200':
          description: Password reset email sent successfully
        '404':
          description: No account with that email address exists
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/reset-password/{token}:
    post:
      tags:
        - Authentication
      summary: Reset password
      description: Resets the user's password using the provided reset token.
      parameters:
        - name: token
          in: path
          required: true
          schema:
            type: string
          description: The password reset token
      requestBody:
        description: New password
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
      responses:
        '200':
          description: Password has been successfully reset
        '400':
          description: Password reset token is invalid or has expired
        '500':
          $ref: '#/components/responses/InternalServerError'


  /api/users:
    get:
      tags:
        - Users
      summary: Get all users
      responses:
        '200':
          description: A list of users

    post:
      tags:
        - Users
      summary: Create a new user
      requestBody:
        description: User object that needs to be added
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
                phoneNumber:
                  type: string
      responses:
        '201':
          description: User created successfully

  /api/users/{id}:
    get:
      tags:
        - Users
      summary: Get a user by ID
      parameters:
        - $ref: '#/components/parameters/UserId'
      responses:
        '200':
          description: User retrieved successfully
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags:
        - Users
      summary: Update a user by ID
      parameters:
        - $ref: '#/components/parameters/UserId'
      requestBody:
        description: Updated user object
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
                phoneNumber:
                  type: string
      responses:
        '200':
          description: User updated successfully
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags:
        - Users
      summary: Delete a user by ID (only if they are not admins)
      parameters:
        - $ref: '#/components/parameters/UserId'
      responses:
        '200':
          description: User deleted successfully
        '403':
          description: User cannot be deleted because they have the AssignRoles role

  /api/posts:
    post:
      tags:
        - Posts
      summary: Create a new post
      requestBody:
        description: Post object that needs to be added
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                body:
                  type: string
      responses:
        '201':
          description: Post created successfully

    get:
      tags:
        - Posts
      summary: Get all posts
      responses:
        '200':
          description: A list of posts

  /api/posts/{id}:
    get:
      tags:
        - Posts
      summary: Get a post by ID
      parameters:
        - $ref: '#/components/parameters/PostId'
      responses:
        '200':
          description: Post retrieved successfully
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - Posts
      summary: Update a post by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Posts object with updated content
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                body:
                  type: string
      responses:
        '200':
          description: post updated successfully
        '404':
          description: post not found
        '403':
          description: Not authorized to update this post

    delete:
      tags:
        - Posts
      summary: Delete a post by ID
      parameters:
        - $ref: '#/components/parameters/PostId'
      responses:
        '200':
          description: Post deleted successfully
        '403':
          description: Not authorized to delete this post

  /api/comments:
    get:
      tags:
        - Comments
      summary: Get all comments
      responses:
        '200':
          description: A list of comments
  paths:
  /api/comments/{id}:
    post:
      tags:
        - Comments
      summary: Add a comment to a post
      requestBody:
        description: Comment object that needs to be added
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                body:
                  type: string
      responses:
        '201':
          description: Comment added successfully
    put:
      tags:
        - Comments
      summary: Update a comment by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Comment object with updated content
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                body:
                  type: string
      responses:
        '200':
          description: Comment updated successfully
        '404':
          description: Comment not found
        '403':
          description: Not authorized to update this comment

    delete:
      tags:
        - Comments
      summary: Delete a comment by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Comment deleted successfully
        '404':
          description: Comment not found
        '403':
          description: Not authorized to delete this comment


  /api/roles:
    post:
      summary: Create new roles
      tags:
        - Roles
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                roles:
                  type: array
                  items:
                    type: string
                  example: ["DeletePosts", "EditPosts"]
      responses:
        '201':
          description: Roles created successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                    name:
                      type: string
                      example: "DeletePosts"
        '400':
          description: Invalid input
        '500':
          description: Server error
    get:
      tags:
        - Roles
      summary: Get all roles
      responses:
        '200':
          description: A list of roles

  /api/roles/{id}:
    get:
      tags:
        - Roles
      summary: Get a role by ID
      parameters:
        - $ref: '#/components/parameters/RoleId'
      responses:
        '200':
          description: Role retrieved successfully
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - Roles
      summary: Delete a role by ID
      parameters:
        - $ref: '#/components/parameters/RoleId'
      responses:
        '200':
          description: Role deleted successfully
        '403':
          description: Not authorized to delete this role

  /api/assignRoles/{id}:
    post:
      tags:
        - Roles
      summary: Assign roles to a user
      parameters:
        - $ref: '#/components/parameters/UserId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                roles:
                  type: array
                  items:
                    type: string
                  example: ["DeletePosts", "EditPosts"]
      responses:
        '200':
          description: Roles assigned successfully
        '500':
          $ref: '#/components/responses/InternalServerError'
